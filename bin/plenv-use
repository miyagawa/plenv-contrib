#!/usr/bin/env perl
#
# Summary: Launches a new shell with specified perl and/or local::lib path
#
# Usage: plenv use perl-version@lib
#        plenv use perl-version
#        plenv use @lib
#
# Launches a new shell with specified perl version. When the '@lib' part is
# specified, the local::lib name created with plenv lib is also activated.
#
# When the perl version is empty, the current perl version is used.

use strict;

sub current_perl {
    chomp(my $version = `plenv version-name`);
    $version;
}

sub resolve_name {
    my $name = shift;

    my($perl_ver, $lib_name) = split /@/, $name, 2;

    exit 1 if $perl_ver ne '' && do { `plenv prefix $perl_ver`; $?  };

    $perl_ver ||= current_perl;

    ($perl_ver, $lib_name);
}

my $perl_with_lib = shift
    or die "Usage: plenv use perl-version[\@lib]\n";

my($perl_ver, $lib_name) = resolve_name($perl_with_lib);

if ($lib_name) {
    my $local_lib = "$ENV{PLENV_ROOT}/libs/$perl_ver\@$lib_name";
    die "lib $perl_ver\@$lib_name doesn't exist. Create it first with 'plenv lib create'"
        unless -d $local_lib;
    require local::lib;
    my %env = local::lib->build_environment_vars_for($local_lib,
        ($local::lib::VERSION > 1.008026) ? () : (0, local::lib->INTERPOLATE_ENV));

    @ENV{keys %env} = values %env;
}

$ENV{PLENV_VERSION} = $perl_ver;

print "\nA sub-shell is launched with PLENV_VERSION=$perl_ver";
print " and local::lib activated for \@$lib_name" if $lib_name;
print ". Run 'exit' to finish it.\n\n";

exec $ENV{SHELL};
